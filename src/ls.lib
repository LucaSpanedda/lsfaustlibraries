declare name "ls.lib - Luca Spanedda's Library";
declare author "Luca Spanedda";
declare version "1.0";
declare description "2025";
declare copyright "Copyright (C) 2025 Luca Spanedda
< lucaspanedda1995 [at] gmail [dot] com >";
declare license "MIT license";
// Import the standard Faust Libraries
import("stdfaust.lib");


/*******************************************************************************
* CONSTANTS
*******************************************************************************/

// EPSILON = 2.2204460492503131e-016;
EPS = ma.EPSILON;

// PI = 3.141592653589793238462643383279502884197169399375105820974944592307816;
PI = ma.PI;

// TWO PI
TWOPI = 2.0 * PI;

// MAX SAMPLE RATE
SRMAX = 192000;

// CURRENT SAMPLE RATE
SR = ma.SR;

// NYQUIST FREQUENCY AT CURRENT SAMPLE RATE
NY = SR / 2.0;

// 1 SAMPLE IN SECONDS
T = 1.0 / SR;

// T IN PI
PIT = PI * T;

// T IN TWOPI
TWOPIT = TWOPI * T;

// HIGHEST NUMBER : MAX = 1.7976931348623158e+308;
MAX = ma.MAX;

// LOWEST NUMBER : MIN = 2.2250738585072014e-308;
MIN = ma.MIN;

// HIGHEST UDIBLE RANGE
HUR = 20000;

/*******************************************************************************
* BASIC OPERATIONS AND SIGNALS
*******************************************************************************/

// limit a signal
limit(low, high, x) = max(low, min(high, x));

// signal signum
signum(x) = (x > 0) - (x < 0);

// Unipolar to bipolar
uni2bi(x) = x * 2.0 - 1.0;

// Bipolar to unipolar
bi2uni(x) = (x + 1) * 0.5;

// only decimal pass
decimal(x) = x - int(x);

// only integer pass
integer(x) = int(x);

// first derivate
derivate(x) = x < x';

// shift in phase (0 to 1) giving only the fractional part of x
phwrap(ph, x) = x <: (_ + ph) - int(_ + ph);

// Linear interpolation
linInterpolate(x0, x1, delta) = x0 + delta * (x1 - x0);
siglinInterpol(order, x) = x : seq(r, order, interpolate)
with{
    interpolate(y) = y + .5 * (y' - y);
};

// Bilinear interpolation
bilinInterpolate(x0, x1, x0b, x1b, dt1, dt2) =
    linInterpolate(
        linInterpolate(x0, x1, dTG1),
        linInterpolate(x0b, x1b, dTG1),
        dt2)
    with{
        linInterpolate(x0, x1, delta) = x0 + delta * (x1-x0);
    };

/*******************************************************************************
* CONVERSIONS
*******************************************************************************/

// Conversions Formula: dB to a linear gain (0-1) and linear to dB
linear2dB(x) = 20.0 * log10(max (MIN, x));

// linear to dB
dB2linear(x) = pow(10.0, x / 20.0);

// frequency (Hz) to seconds
f2sec(f) = 1 / f;

// milliseconds to samples
ms2samp(t) = (t / 1000) * SR;

// seconds to samples
sec2samp(t) = t * SR;

// (samps) = give tot. samples we want to know in milliseconds
samps2ms(samps) = ((1000 / SR) * samps) : int;

// (meters) = give a distance in meters for samples of the filter
meters2samps(meters) = ((SR / 1000) * ((1000 * meters) / 343.1) * 2);

// (samps,seconds) = give: samples of the filter, seconds we want for t60 decay
T60samps(samps, seconds) = 1/(10^((3*(((1000 / SR)*samps)/1000))/seconds));

// (ms,seconds) = give: ms delay of the filter, seconds we want for t60 decay
T60ms(ms,seconds) = 1 / (10^((3*(ms / 1000)) / seconds));

/*******************************************************************************
* PHASORS
*******************************************************************************/

// classic phasor
phasor(f) = f : + ~  _ % SR : _ / SR;

// phasor that start from 0
phasor0(f) = (_ <: _ + f, _) ~  _ % SR : (!, _ / SR);

// phasor that start from zero until ando goes until % value
phasor0V(f, value) = (_ <: _ + f, _) ~  _ % value : (!, _);

// phasor with phase reset
phasorPH(f, reset) = (_ <: _ + f, _) ~  (_ % SR : _ * (1 - reset)) :
  (!, _ / SR);

// phasor with phase offset : 0 - 1
phasorOffset(f, offset) = (_ <: _ + f, _) ~  _ % SR : (!, _) :
  (_ + offset * SR) % SR : _ / SR;

// ramp : trigger with 1 sample trigger
ramp(f, t) = (t == 0) * f : (+ ~ _* (1 - t)) / SR <: (_ < 1) * _;
rampms(ms, t) = (t == 0) * (1000 / ms) : (+ ~ _* (1 - t)) / SR <: (_ < 1) * _;

// phasor with Phase Jitter : trigger with 1 sample trigger
phasorScattering(f, seed, t) = phasorOffset(f, sah(noise(seed), t) : abs);

// rate accepts an input signal from a phasor and time scales it by a multiplier
rate(f) = _ <: (((_ < mem(_)) : (_ + _) ~ _ % f : _) + _) / f;
//process = phasor0(1) : rate(8);

// line function generator (from 0 to value at SR time). trigger = dirac
line(trigger, value) = feedf ~ feedb : offset
 with
    {
        break = value;
        y = trigger > trigger';
        feedf(x) = (x > 0) + (x * (x > 0)) + y;
        feedb(x) = (x <= break) * x;
        offset(x) = ((x - 1) > 0) * (x - 1);
    };

// timedlatch is 1 for a period of time in samples after being triggered
timedlatch(value, trigger) = (feedf ~ feedb) > 0
 with
    {
        break = value;
        y = trigger > trigger';
        feedf(x) = (x > 0) + (x * (x > 0)) + y;
        feedb(x) = (x <= break) * x;
    };
//process = button("gate") : timedlatch(ma.SR * 10);

/*******************************************************************************
* PULSE SIGNALS GENERATION
*******************************************************************************/

// Dirac Impulse at Compile Time
dirac = 1 - (1 : mem);

// Synchronous pulse train in HZ
pulseTrain(f) = phasor0(f) : derivate + dirac;

// Synchronous pulse train in HZ with width in samples
pwTrain(f, samps) = ((phasor0(f) * SR) - (f * samps)) < 0;

// asynchronous pulse train in HZ : fBase = standard frequency,
// fMod = -/+ asynchronous deviation
asincPulseTrain(fBase, fMod, seed) = (phasor0 : derivate) ~
  ((noise(seed), _ + dirac) : sah : abs :
  (_ * max(- fBase + 1, fMod) + fBase)) :
  _ + dirac;

// trainpulse Sequence
pulseSeq(fSeq, fBase, fMod, seed) = buffer : condition
 with
    {
        pulse = asincPulseTrain(fBase, fMod, seed);
        recIndex = line(button("TR"), SR);
        readIndex = phasor0V(fSeq, SR);
        buffer = rwtable(SRMAX, 0.0, recIndex, pulse, readIndex);
        condition(x) = x > x';
    };
//process = pulseSeq(0.25, 1, 100, 7432943824238), pulseSeq(0.25, 1, 100, 57438524238);

/*******************************************************************************
* WINDOW FUNCTIONS
*******************************************************************************/

// Sine window function
sine(ph) = sin(ph * 2 * PI);

// Cosine window function
cosine(ph) = cos((ph + 0.25) * 2 * PI);

// TanH window function
tanh(g, ph) = ma.tanh(ph * g);

// triangular function
triangular(ph) = abs(ma.frac((ph - .5)) * 2.0 - 1.0);

// breakpoint triangular function
breakpointTriangle(ph, x) = ((x > ph) * (((1 - ph) - (x - ph)) /
  (1 - ph))) + ((x < ph) * (x / ph));

// clipping function
clip(low, high, x) = max(low, min(high, x));

// softclipping via hyperbolic tangent function
saturator(lim, x) = lim * tanh(1, x / (max(lim, EPS)));

/*******************************************************************************
* VIRTUAL ANALOG OSCILLATORS
*******************************************************************************/

// sinusoidal oscillator
sineosc(f) = sine(phasor0(f));

// cosinusoidal oscillator
cosineosc(f) = cosine(phasor0(f));

// triangular function
triangularosc(f) = (triangular(phasor0(f)) - 0.5) * 2;

// sawtoothosc
sawtoothosc(f) = (phasor0(f) * -1 + 0.5) * 2;

// square oscillator
squareosc(f) = ((phasor0(f) < 0.5) - 0.5) * 2;

/*******************************************************************************
* CHAOTIC OSCILLATORS
*******************************************************************************/

// Logistic Map
logisticmap(x0,r) = circuit ~ _
    with {
        circuit(y) = (x0-x0') + y * r * (1 - y);
    };
// process = (.8, 3.99991) : logisticmap -.5 : \(x).(x,x);

// Sine Map
sinemap(x0,s) = circuit ~ _
    with {
        circuit(x) = (x0-x0') + s * sin(PI * x);
    };
// process = (.5,.9992) : sinemap -.5 : \(x).(x,x);

// Henon Map
henonmap(a,b) = circuit ~ _
    with {
        circuit(x) = 1 - (a * (x * x)) + (b * x');
    };
//process = (1.4,0.3) : henonmap : \(x).(x,x);

// First Return Map
firstreturnmap(x0,u) = circuit ~ _
    with {
        circuit(x) = (x0-x0') + 4 * u * x * (1 - x);
    };
// process = (.5,.9992) : firstreturnmap;

// Collatz conjecture
collatz(x0) = circuit ~ _
    with {
        circuit(w) = (x0 - x0') + w :
                        \(x).((x%(2) == 0) * x, (x%(2) == 1) * x) :
                            \(odd, even).(odd/2,(even*3)+((even>0))) :> +;
    };
// process = sin( (collatz(139489332) * PI));

// Bernoulli Shift
bernoulli(x0) = circuit ~ _ : \(z).(z-int(z))
    with {
        circuit(x) = (x0 - x0') + (x * 2.0);
    };
// process = bernoulli(.1324);

// Lorenz Model
lorenz(x0,y0,z0,sigma,rho,beta,dt,q) = circuit ~ si.bus(3)
    with {
        circuit(x,y,z) =
            ( (x+ (sigma*(y-x))*dt) * q )+ (x0-x0'),
            ( (y+ (rho*x -(x*z) -y) * dt)*q )+ (y0-y0'),
            ( (z+ ((x*y)-(beta*z)) * dt)*q )+ (z0-z0');
    };
// process =   (1.2,1.3,1.6, 10.0,28,2.666667,.005, 1.0) : lorenz : \(x,y,z).(x+y+z)/100 : \(x).(x,x);

// Van Der Pol Oscillator
vanderpol(x0,y0,u,dt,epsilon) = circuit ~ si.bus(2)
    with {
        circuit(x,y) =
            ( x + (u * (x - x ^ 3 / 3 - y) * dt) ) + (x0-x0'),
            ( y + (x / max(u,epsilon) ) * dt ) + (y0-y0');
    };
// process = (1,1, 1.0,0.01,2.2204460492503131e-016) : vanderpol : \(x,y).(x/4,y/4);

// Chua Oscillator
chua(x0,y0,z0,k,a,b,alpha,beta,gamma,dt) = circuit ~ si.bus(3)
    with {
        f(x) = b * x + .5 * (a-b) * (abs(x + 1) - abs(x - 1));
        circuit(x,y,z) =
            (x0-x0' + x + k *( alpha * (y - x - f(x))) * dt),
            (y0-y0' + y + k *( (x - y + z)) * dt),
            (z0-z0' + z + k *(-beta * y - gamma * z) * dt);
    };
// process =   (1.16346, -0.0972335, -0.905656, 1, -1.14286, -0.714286, 15.6, 28.58, 0, 0.01) : chua : \(x,y,z).(x+y+z)/3 : \(x).(x,x);

/*
for more models serch:
    -Dyadic transformation
    -Gauss iterated map
    -Bogdanov map
    -Brusselator
    -Lotka-Volterra
    -Duffing Oscillator
    -Hindmarsh–Rose neuron model
*/

/*******************************************************************************
* SAH : SAMPLE AND HOLD
*******************************************************************************/

// binary selector
selector(sel, x, y) = x * (1 - sel) + y * (sel);

// a classic sample and hold
sah(x, t) = selector(t, _, x) ~ _;

// sample and hold with internal trigger
sahSinc(f, x) = (x, pulseTrain(f)) : sah;

// asynchronous pulse train in HZ : fBase = standard frequency,
// fMod = -/+ asynchronous deviation
sahAsinc(fBase, fMod, seed, x) = (x, asincPulseTrain(fBase, fMod, seed)) : sah;

// Sample-and-hold signals whose slope changes sign over a certain period
SAHDiffInvertion(x) = loop ~ _
    with {
        loop(y) = ba.if(nonZeroDiff * nonZeroDiff' < .0, x, y);
        nonZeroDiff = ba.sAndH(abs(diff(x)) > EPS, diff(x));
        diff(x) = x - x';
    };

/*******************************************************************************
* RANDOM VALUES GENERATION
*******************************************************************************/

// Synchronous pulse train in HZ
metro(ms) = phasor0(1000 / max(1, ms)) : derivate + dirac
with{
    // phasor that start from 0
    phasor0(f) = (_ <: _ + f, _) ~ _ % ma.SR : (!, _ / ma.SR);
    // Dirac Impulse at Compile Time
    dirac = 1 - (1 : mem);
    // first derivate
    derivate(x) = x < x';
};
//process = metro(100);

// Pseudo-random noise with linear congruential generator (LCG)
noise(initSeed) = lcg ~ _ : (_ / m)
with{
    a = 18446744073709551557; c = 12345; m = 2 ^ 31;
    lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
};
//process = noise(1212);

// Noise - Linear Congruential Generator - Multiple Outputs
multinoise(N, initSeed) = ((_ + (initSeed - initSeed') :
    seqN(N, (_ * a + c) % m )) ~ _ : par(i, N, _ / m))
with{
    // LCG constants
    a = 18446744073709551557; c = 12345; m = 2 ^ 31;
    // Sequential operations
    seqN(N, OP) = _ <: seq(i, N, (OP <: _, _),
        si.bus(i + 1)) : (_, !, si.bus(N - 1), !);
};
//process = multinoise(4, 1212);

// random number generator
random(range, seed, trigger) = ((noise(seed) : abs), dirac(trigger)) :
    sah * range
with{
    // transform a constant to 1 sample trigger
    dirac(x) = (x - x') > 0;
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31;
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // a classic sample and hold
    sah(x, t) = selector(t, _, x) ~ _
    with{
        // binary selector
        selector(sel, x, y) = x * (1 - sel) + y * (sel);
    };
};
//process = random(100, 1212, button("trigger"));

// random impulse generator / ms1 & ms2 = range
randometro(seed, ms1, ms2) = randomtrigger
with{
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31;
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // Dirac Impulse at Compile Time
    dirac = 1 - (1 : mem);
    derivate(x) = x < x';
    phasor0(f) = (_ <: _ + f, _) ~  _ % ma.SR : (!, _ / ma.SR);
    pulseTrain(f) = phasor0(f) : derivate;
    // a classic sample and hold
    sah(t, x) = selector(t, _, x) ~ _
    with{
        // binary selector
        selector(sel, x, y) = x * (1 - sel) + y * (sel);
    };
    msMin = min((1000 / max(1, ms1)), (1000 / max(1, ms2)));
    msMax = max((1000 / max(1, ms1)), (1000 / max(1, ms2)));
    randomtrigger = ((_ + dirac), abs(noise(seed)) * (msMax - msMin) + msMin :
        sah : pulseTrain) ~ _;
};
//process = randometro(1212, 100, 4000), randometro(1234, 100, 4000);

// noise sampled with a classic sample and hold
sahNoise(seed, f) = selector(pulseTrain, _, noise(seed)) ~ _
with{
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31;
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // binary selector
    selector(sel, x, y) = x * (1 - sel) + y * (sel);
    // Dirac Impulse at Compile Time
    dirac = 1 - (1 : mem);
    derivate(x) = x < x';
    phasor0 = (_ <: _ + f, _) ~  _ % ma.SR : (!, _ / ma.SR);
    pulseTrain = phasor0 : derivate + dirac;
};
//process = sahNoise(1212, 100);

// SAH noise at random intervals / ms1 & ms2 = range
sahNoiserandom(seed, ms1, ms2) = selector(randometro, _, noise(seed)) ~ _
with{
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31;
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // binary selector
    selector(sel, x, y) = x * (1 - sel) + y * (sel);
    // random impulse generator / ms1 & ms2 = range
    randometro = randomtrigger
    with{
        // Dirac Impulse at Compile Time
        dirac = 1 - (1 : mem);
        derivate(x) = x < x';
        phasor0(f) = (_ <: _ + f, _) ~  _ % ma.SR : (!, _ / ma.SR);
        pulseTrain(f) = phasor0(f) : derivate;
        // a classic sample and hold
        sah(t, x) = selector(t, _, x) ~ _
        with{
            // binary selector
            selector(sel, x, y) = x * (1 - sel) + y * (sel);
        };
        msMin = min((1000 / max(1, ms1)), (1000 / max(1, ms2)));
        msMax = max((1000 / max(1, ms1)), (1000 / max(1, ms2)));
        randomtrigger = ((_ + dirac), abs(noise(seed * 2)) * (msMax - msMin) +
            msMin : sah : pulseTrain) ~ _;
    };
};
//process = sahNoiserandom(1212, 100, 4000);

// random walk generator : variable steps and max value
drunk(seed, maxvalue, stepsize, trigger) = noise(seed), (trigger : dirac) :
    sah * (abs(stepsize) + 1) : int * (trigger : dirac) : + ~ _ :
        foldInt(abs(maxvalue))
with{
    // transform a constant to 1 sample trigger
    dirac(x) = (x - x') > 0;
    // pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31;
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // a classic sample and hold
    sah(x, t) = selector(t, _, x) ~ _
    with{
        // binary selector
        selector(sel, x, y) = x * (1 - sel) + y * (sel);
    };
    // fold at max Int value and 0
    foldInt(maxv, x) = maxv - abs((abs(x) % (2 * maxv)) - maxv);
};
//process = (os.phasor(1, 10) - 0.1 < 0.0) : drunk(1212, 100, 10);

/*******************************************************************************
* DIGITAL FILTERS
*******************************************************************************/

// onezero, g = give amplitude 0 to +/- 1 (open - close) to the delayed signal
oz(g) = _ <: (_ : mem * g), _ :> +;

// onepole, g = give amplitude 0 to +/- 1 (open - close) to the delayed signal
op(g) = _ * (1 - abs(g)) : + ~ (_ : * (g));

// only the pole section
pole(g) = + ~ * (g);

// dc blocker - https://ccrma.stanford.edu/~jos/fp/DC_Blocker.html
dcblocker = _ : oz(-1) : pole(0.998);

// onepole with frequency cut formula (chamberlin), fc = Hz
lp1p(fc) = _ * g : + ~ * (1 - g)
    with{
        k(x) = x / (1.0 + x);
        g = tan(fc * PI / SR) : k;
    };

lp1p2(fc) = _ * a0 : + ~ * (b1)
      with {
           a0 = 1 - b1;
           b1 = exp((fc * PI / SR) * -1);
      };

// onepole in seconds or smooth function
opsec(sec) = lp1p(f2sec(sec), _);
smooth(sec) = opsec(sec);

// feedforward comb filter, (t, g) = delay time in samples, filter gain 0-1
ffcf(t, g) = _ <: ((_ @ (t)) * g), _ :> +;

// feedback comb filter, (t, g) = give: delay time in samples, feedback gain 0-1
fbcf(t, g) = _ : (+  @(t - 1) ~ *(g)) : mem;

// allpass filter, (t, g) = give: delay in samples, feedback gain 0-1
apf(del, g) = _ : (+ : _ <: @(del  - 1), *(g))~ *(-g) : mem, _ : + : _;

// lowpass feedback comb filter, (t, g) = give:
// delay time in samples, g gain 0-1, Freq cut (HZ)
lbcf(t, g, fc) = _ : (+  @(t - 1) ~ (lp1p(fc) * (g))) : mem;

/*******************************************************************************
* SVF : STATE VARIABLE FILTERS & TPT
*******************************************************************************/

// Vadim Zavalishin's SVF TPT filter (Topology Preserving Transform)
SVFTPT(Q, cf, x) = loop ~ si.bus(2) : (! , ! , _ , _ , _ , _ , _)
    with {
        g = tan(cf * ma.PI * ma.T);
        R = 1.0 / (2.0 * Q);
        G1 = 1.0 / (1.0 + 2.0 * R * g + g * g);
        G2 = 2.0 * R + g;
        loop(s1, s2) = u1 , u2 , lp , hp , bp * 2.0 * R , x - bp * 4.0 * R , bp
            with {
                hp = (x - s1 * G2 - s2) * G1;
                v1 = hp * g;
                bp = s1 + v1;
                v2 = bp * g;
                lp = s2 + v2;
                u1 = v1 + bp;
                u2 = v2 + lp;
            };
    };

// HP - LP SVF
LPSVFTPT(Q, cf, x) = SVFTPT(Q, cf, x) : (_ , ! , ! , ! , !);
HPSVFTPT(Q, cf, x) = SVFTPT(Q, cf, x) : (! , _ , ! , ! , !);

// Normalized Bandpass SVF
BPSVFTPT(Q, cf, x) = SVFTPT(Q, cf, x) : (! , ! , _ , ! , !);

NotchSVFTPT(Q, cf, x) = x - BPSVF(Q, cf, x);
APSVFTPT(Q, cf, x) = SVFTPT(Q, cf, x) : (! , ! , ! , _ , !);
PeakingSVFTPT(Q, cf, x) = LPSVF(Q, cf, x) - HPSVF(Q, cf, x);
BP2SVFTPT(Q, cf, x) = SVFTPT(Q, cf, x) : (! , ! , ! , ! , _);

// Bandpass Bandwidth SVF
BPBWSVFTPT(BW, CF, x) = BPSVF(clip(20000, EPS, (CF / BW)), CF, x);


// Optimized BP from the TPT version of the SVF Filter by Vadim Zavalishin
// Bandpass Bandwidth SVF
BPTPTOptimized(gf, bw, cf, x) = loop ~ si.bus(2) : (! , ! , _ * gf)
with {
    g = tan(cf * ma.PI * (1.0/ma.SR));
    Q = cf / max(ma.EPSILON, bw);
    R = 1.0 / (Q + Q);
    G = 1.0 / (1.0 + 2.0 * R * g + g * g);
    loop(s1, s2) = u1 , u2 , bp
        with {
            bp = (g * (x - s2) + s1) * G;
            bp2 = bp + bp;
            v2 = bp2 * g;
            u1 = bp2 - s1;
            u2 = v2 + s2;
        };
};

// Normalized Bandpass SVF TPT
BPTPTNormalized(gf, bw, cf, x) = loop ~ si.bus(2) : (! , ! , _ * gf)
    with {
        g = tan(cf * ma.PI * ma.T);
        R = 1.0 / (2.0 * bw);
        G1 = 1.0 / (1.0 + 2.0 * R * g + g * g);
        G2 = 2.0 * R + g;
        loop(s1, s2) = u1 , u2 , bp * 2.0 * R
            with {
                hp = (x - s1 * G2 - s2) * G1;
                v1 = hp * g;
                bp = s1 + v1;
                v2 = bp * g;
                lp = s2 + v2;
                u1 = v1 + bp;
                u2 = v2 + lp;
            };
    };

// Robert Bristow-Johnson's Biquad Filter - Direct Form 1
// https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html
biquad(i, cf, q) = _ : coefficients(i) : biquadFilter
    with{
    biquadFilter(a0, a1, a2, b1, b2) = biquadFilter
        with{
        biquadFilter =  _ <: _, (mem  <: (_, mem)) : (_ * a0, _ * a1, _ * a2) :>
            _ : ((_, _) :> _) ~ (_ <: (_, mem) : (_ * -b1, _ * -b2) :> _);
        };

        // Angular Frequency formula
        omega(x) = (2 * ma.PI * x) / ma.SR;
        // Angular Frequency in the sine domain
        sn(x) = sin(omega(x));
        // Angular Frequency in the cosine domain
        cs(x) = cos(omega(x));
        // Alpha
        alpha(cf0, q0) = sin(omega(cf0)) / (2 * q0);

        // Robert Bristow-Johnson's Biquad Filter - Coefficents
        // Lowpass Filter
        coefficients(0) = a0, a1, a2, b1, b2, _
        with{
            b0 = (1 + alpha(cf, q));
            a0 = ((1 - cs(cf)) / 2) / b0;
            a1 = (1 - cs(cf)) / b0;
            a2 = ((1 - cs(cf)) / 2) / b0;
            b1 = (-2 * cs(cf)) / b0;
            b2 = (1 - alpha(cf, q)) / b0;
        };
        // Highpass filter
        coefficients(1) = a0, a1, a2, b1, b2, _
        with{
            b0 = (1 + alpha(cf, q));
            a0 = ((1 + cs(cf)) / 2) / b0;
            a1 = (-1 * (1 + cs(cf))) / b0;
            a2 = ((1 + cs(cf)) / 2) / b0;
            b1 = (-2 * cs(cf)) / b0;
            b2 = (1 - alpha(cf, q)) / b0;
        };
        // Bandpass Filter
        coefficients(2) = a0, a1, a2, b1, b2, _
        with{
            b0 = 1 + alpha(cf, q);
            a0 = alpha(cf, q) / b0;
            a1 = 0;
            a2 = - alpha(cf, q) / b0;
            b1 = (-2 * cs(cf)) / b0;
            b2 = (1 - alpha(cf, q)) / b0;
        };
        // Notch filter
        coefficients(3) = a0, a1, a2, b1, b2, _
        with{
            b0 = 1 + alpha(cf, q);
            a0 = 1 / b0;
            a1 = (-2 * cs(cf)) / b0;
            a2 = 1 / b0;
            b1 = (-2 * cs(cf)) / b0;
            b2 = (1 - alpha(cf, q)) / b0;
        };
        // Peaking EQ filter
        coefficients(4) = a0, a1, a2, b1, b2, _
        with{
            A = 10;
            b0 = 1 + (alpha(cf, q) / A);
            a0 = (1 + (alpha(cf, q) * A)) / b0;
            a1 = (-2 * cs(cf)) / b0;
            a2 = (1 - (alpha(cf, q) * A)) / b0;
            b1 = (-2 * cs(cf)) / b0;
            b2 = (1 - (alpha(cf, q) / A)) / b0;
        };
        // Low Shelf Filter
        coefficients(5) = a0, a1, a2, b1, b2, _
        with{
            //dbGain 20;
            A  = pow(10, -20 /40);
            beta = sqrt(A + A);
            b0 = (A + 1) + (A - 1) * cs(cf) + beta * alpha(cf, q);
            a0 = (A * ((A + 1) - (A - 1) * cs(cf) + beta * alpha(cf, q))) /b0;
            a1 = (2 * A * ((A - 1) - (A + 1) * cs(cf))) / b0;
            a2 = (A * ((A + 1) - (A - 1) * cs(cf) - beta * alpha(cf, q))) /b0;
            b1 = (-2 * ((A - 1) + (A + 1) * cs(cf))) / b0;
            b2 = ((A + 1) + (A - 1) * cs(cf) - beta * alpha(cf, q)) / b0;
        };
        // High Shelf Filter
        coefficients(6) = a0, a1, a2, b1, b2, _
        with{
            //dbGain 20;
            A  = pow(10, -20 /40);
            beta = sqrt(A + A);
            b0 = (A + 1) - (A - 1) * cs(cf) + beta * alpha(cf, q);
            a0 = (A * ((A + 1) + (A - 1) * cs(cf) + beta * alpha(cf, q))) /b0;
            a1 = (2 * A * ((A - 1) + (A + 1) * cs(cf))) / b0;
            a2 = (A * ((A + 1) + (A - 1) * cs(cf) - beta * alpha(cf, q))) /b0;
            b1 = (2 * ((A - 1) - (A + 1) * cs(cf))) / b0;
            b2 = ((A + 1) - (A - 1) * cs(cf) - beta * alpha(cf, q)) / b0;
        };
};

/*******************************************************************************
* TPT OP & BUTTERWORTH FILTERS
*******************************************************************************/

// Vadim Zavalishin's Onepole TPT Filter (Topology Preserving Transform)
onePoleTPT(cf, x) = loop ~ _ : ! , si.bus(3)
    with {
        g = tan(cf * PI * ma.T);
        G = g / (1.0 + g);
        loop(s) = u , lp , hp , ap
            with {
            v = (x - s) * G; u = v + lp; lp = v + s; hp = x - lp; ap = lp - hp;
            };
    };

// Lowpass and Highpass TPT
LPTPT(cf, x) = onePoleTPT(cf, x) : (_ , ! , !);
HPTPT(cf, x) = onePoleTPT(cf, x) : (! , _ , !);

// Allpass TPT
APTPT(cf, x) = onePoleTPT(cf, x) : (!, !, _);

// BUTTERWORTH
butterworthQ(order, stage) = qFactor(order % 2)
    with {
        qFactor(0) = 1.0 / (2.0 * cos(((2.0 * stage + 1) *
        (PI / (order * 2.0)))));
        qFactor(1) = 1.0 / (2.0 * cos(((stage + 1) * (PI / order))));
    };

LPButterworthN(1, cf, x) = LPTPT(cf, x);
LPButterworthN(N, cf, x) = cascade(N % 2)
    with {
        cascade(0) = x : seq(i, N / 2, LPSVF(butterworthQ(N, i), cf));
        cascade(1) = x : LPTPT(cf) : seq(i, (N - 1) / 2,
        LPSVF(butterworthQ(N, i), cf));
    };
// process = LPButterworthN(4, 1000, noise(1234));

HPButterworthN(1, cf, x) = HPTPT(cf, x);
HPButterworthN(N, cf, x) = cascade(N % 2)
    with {
        cascade(0) = x : seq(i, N / 2, HPSVF(butterworthQ(N, i), cf));
        cascade(1) = x : HPTPT(cf) : seq(i, (N - 1) /
        2, HPSVF(butterworthQ(N, i), cf));
    };
// process = HPButterworthN(4, 10000, noise(1234));

/*******************************************************************************
* SPECIAL CASES FILTERS
*******************************************************************************/

// Nesting the allpasses sections
APFnest(del, g, y) = _ : (+ : _ <: @(del  - 1), * (g))~ y *(-g) : mem, _ : + : _;
// process = _ :
//     nestapf(ms2samp(40), .5,
//         nestapf(ms2samp(30), .5,
//             nestapf(ms2samp(20), .75, _)));

// Allpass Filters Lattice : parallel, sequency, min. of distribution,
// max. of distribution, par offset, allpasses gain
apfLattice(columns, rows, minN, maxN, verticalOffset, g) = APFgrid
with{
    rangeN = maxN - minN;
    step = rangeN / rows;
    primesNum(i) = ba.take(i, primes);
    ms2samp(t) = (t / 1000) * SR;
    APF(del, g, x) = x : (+ : _ <: @(del  - 1), *(g))~ *(-g) : mem, _ : + : _;
    APFgrid =
        par(j, columns,
                seq(i, rows,
                    APF( primesNum(int(i * step + minN + j * verticalOffset)) :
                    ms2samp, g)
                )
        );
    };
//process = _ <: apfLattice(4, 5, 20, 80, 4, .5);

// Modulated Allpass filter
modapf(delsamples, samplesmod, freqmod, apcoeff) = ( + : _ <:
    delayMod(delsamples, samplesmod, freqmod),
    * (apcoeff))~ * (-apcoeff) : mem, _ : + : _
    with{
        delayMod(samples, samplesMod, freqMod, x) = delay
        with{
            unipolarMod(f, samples) = ((os.osc(f) + 1) / 2) * samples;
            delay = x : de.fdelay(samples, samples -
                unipolarMod(freqMod, samplesMod));
        };
    };
//process = _ <: modapf(1100, 800, .12, .99), modapf(1000, 900, .12, .99);

/*******************************************************************************
* AIP : AUDIO INFORMATION PROCESSING
*******************************************************************************/

// Max Peak of the signal
// Peak Max with IIR filter and max comparison
peakmax(x) = loop ~_
with{
    loop(y) = abs(x) , y : max;
};
//process = _ : peakmax;

// Peak Max Normalization
fixedNorm(x) = 1 / (x : loop ~ _) * x
with{
    loop(y,z) = ( (y, abs(z) ) : max);
};
//process = _ * .2 : fixedNorm;

// Peak Envelope Follower
peakenvelope(period, x) = loop ~ _
    with {
        loop(y) = max(abs(x), y * coeff);
        twoPIforT = (2.0 * ma.PI) * (1.0 / ma.SR);
        coeff = exp(-twoPIforT / max(EPS, period));
    };

// Peak envelope. with attack and decay
peakEnvAttRel(att, rel, x) = peakenvelope(rel - att, x) :
    LPTPT(1.0 / max(EPS, att));

// Moving Average Envelope Follower
movingAverage(seconds, x) = x - x@(seconds * ma.SR) :
    fi.pole(1.0) / (seconds * ma.SR);
//process = _ * 10 : movingAverage(1);

// Moving Average RMS
movingAverageRMS(seconds, x) = sqrt(max(0, movingAverage(seconds, x ^ 2)));
//process = movingAverageRMS(1);

// PeakHolder - holdTime in Seconds
peakHolder(holdTime, x) = loop ~ si.bus(2) : ! , _
with {
    loop(timerState, outState) = timer , output
    with {
        isNewPeak = abs(x) >= outState;
        isTimeOut = timerState >= (holdTime * ma.SR - 1);
        bypass = isNewPeak | isTimeOut;
        timer = ba.if(bypass, 0, timerState + 1);
        output = ba.if(bypass, abs(x), outState);
    };
};

// Attack and Decay RMS Average
RMS(att, rel, x) = loop ~ _ : sqrt
    with {
        loop(y) = (1.0 - coeff) * x * x + coeff * y
            with {
                attCoeff = exp(-2.0 * ma.PI * ma.T / att);
                relCoeff = exp(-2.0 * ma.PI * ma.T / rel);
                coeff = ba.if(abs(x) > y, attCoeff, relCoeff);
            };
    };

// lookahead limiter with: peakHolder, lowpass & peakenvelope
// All the credits of the original version goes to Dario Sanfilippo
LookaheadLimiter(threshold, holdSec, decaySec, x) =
    (x : peakHolder(holdSec) : LPTPT(1/holdSec) : peakenvelope(decaySec)) :
        (min(1, threshold) / max(1, _)) *
            (x @ (holdSec * ma.SR));

// Dynamic Comnpressor
dynamiComp(i, k, att, rel, exponent, x) =
vgroup("dynaComp %i", (x * scaling) : hgroup("out %i", infoScale(k, -100, 100)))
    with {
        complement(x) = 1.0 - x;
        clipUni(x) = max(0.0, min(1.0, x));
        scaling = ma.tanh(x) : peakEnvAttRel(att, rel) :
            clipUni : complement : pow(exponent :
            hgroup("exp %i", infoScale(k, -100, 100)));
    };


// Pitch Tracker
// averaging function with 2pi time constant; t is the averaging time in seconds
avg(t, x) = y
    letrec {
        'y = x + alpha * (y - x);
    }
        with {
            alpha = exp((-2.0 * ma.PI * ma.T) / t);
        };

// zero-crossing indicator function
zeroCrossing(x) = (x * x') < 0;

// zero-crossing rate
zeroCrossingRate(t, x) = zeroCrossing(x) : avg(t);

// pitch tracker as zero-crossing rate of self-regulating lowpassed inputs
// we highpass the input to avoid infrasonic
// components to affect the measurements
// we then clip the lowpass cutoff to improve stability
pitchTracker(t, x) = loop ~ _
    with {
        loop(y) = fi.lowpass(4, max(80, y), xHighpassed) :
                  (zeroCrossingRate(t) * ma.SR * .5)
            with {
                xHighpassed = fi.highpass(1, 20, x);
            };
    };

// Resonant Frequency Suppressor
resonKill(bypass, T, Q, x) = out
with{
    FC = pitchTracker(T, x);
    filter = x - BPSVF(Q, FC, x);
    out = filter * (1 - bypass) + x * bypass;
};


// Local Max
localMax(seconds, x) = loop ~ si.bus(4) : _ , ! , ! , !
with {
    loop(yState, timerState, peakState, timeInSamplesState) =
        y , timer , peak , timeInSamples
    with {
        timeInSamples = ba.if(reset + 1 - 1', limit(1000, 0, seconds) *
            ma.SR, timeInSamplesState);
        reset = timerState >= (timeInSamplesState - 1);
        timer = ba.if(reset, 1, timerState + 1);
        peak = max(abs(x), peakState * (1.0 - reset));
        y = ba.if(reset, peak', yState);
    };
};
// process = localMax(4);


/*******************************************************************************
* RAW : READ AND WRITE TABLES
*******************************************************************************/

//----------------------------------------------------------------- SAMPLERS ---
delay(maxDelay) = buffer
    with{
        bufferLenght = maxDelay + 1;
        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, phase) = (_ <: _ + f, _) ~ (_ % bufferLenght) :
            (!, _) : (_ + phase) % bufferLenght;
        // pointers
        recIndex =  int(phasorOffset_(1, 0));
        readIndex = int(phasorOffset_(1, 1));
        // buffer
        buffer = rwtable(bufferLenght, 0.0, recIndex, _, readIndex);
    };
//process = _ <: _, delay(0), delay(1), delay(10);

variabledelay(maxDelay, delsamples) = buffer
    with{
        bufferLenght = maxDelay + 1;
        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, phase) = (_ <: _ + f, _) ~
            (_ % bufferLenght) : (!, _) : (_ + phase) % bufferLenght;
        // pointers
        recIndex =  int(phasorOffset_(1, 0));
        readIndex = int(phasorOffset_(1, bufferLenght - delsamples));
        // buffer
        buffer = rwtable(bufferLenght, 0.0, recIndex, _, readIndex);
    };
//process =  _ <: _, variabledelay(1000, hslider("D", 1000, 0, 1000, 1)), _@1000;

deljitter(msBuffer, msJit, fbGain, seed) = outpath
    with{
        // GUI parameter info
        info(i, lower, upper) = hbargraph("%i", lower, upper);
        // ms Buffer
        maxDelay = (ma.SR / 1000) * clip(1, 10000, msBuffer) : int;
        // max fixed delay time for evey SR (10 seconds)
        tableMax = 192000 * 10;
        bufferLenght = maxDelay + 1;
        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, phase) = (_ <: _ + f, _) ~ (_ % bufferLenght) :
            (!, _) : (_ + phase) % bufferLenght;
        // random values at random time
        randomPhase = randomclock(msJit, seed * 1) : random(1, seed * 2, _);
        // pointers
        recIndex =  int(phasorOffset_(1, 0));
        readIndex = int(phasorOffset_(1, (bufferLenght - maxDelay * randomPhase)));
        // buffer
        buffer = rwtable(tableMax, 0.0, recIndex, _, readIndex);
        // output
        outpath = ((_ + _) : buffer) ~ _ * fbGain, (recIndex / bufferLenght :
            info(1, 0, 1)) : attach, (readIndex / bufferLenght :
            info(2, 0, 1)) : attach;
    };
//process =  _ : deljitter(hslider("bufferms", 1000, 1, 10000, 1), 1000, 0.9, 2312409014821);

deljitterloop(msBuffer, msJit, fbGain, loop, seed) = outpath
    with{
        // GUI parameter info
        info(i, lower, upper) = hbargraph("%i", lower, upper);
        // offset for R & W
        offSet = 2;
        // ms Buffer
        maxDelay = (ma.SR / 1000) * clip(1, 10000, msBuffer) : int;
        // max fixed delay time for evey SR (10 seconds)
        tableMax = 192000 * 10 + offSet;
        bufferLenght = maxDelay + 1;
        // loop the Table
        loopON = 1 - loop;
        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, phase) = (_ <: _ + f, _) ~ (_ % bufferLenght) :
            (!, _) : (_ + phase) % bufferLenght;
        // random values at random time
        randomPhase = randomclock(msJit, seed * 1) : random(1, seed * 2, _);
        // pointers
        recIndex =  int(phasorOffset_(1, 0)) * loopON + (offSet * loopON);
        readIndex = int(phasorOffset_(1, (bufferLenght - maxDelay * randomPhase)
            * loopON)) + offSet;
        // buffer
        buffer = rwtable(tableMax, 0.0, recIndex, _, readIndex);
        // output
        outpath = ((_ + _) : buffer) ~ _ * fbGain, (recIndex / bufferLenght :
            info(1, 0, 1)) : attach, (readIndex / bufferLenght :
            info(2, 0, 1)) : attach;
    };
//process =  _ : deljitterloop(hslider("bufferms", 1000, 1, 10000, 1), 1000, 0.99, checkbox("loop"), 2312409014821);

delinversion(msBuffer, msJit, fbGain, seed) = outpath
    with{
        // GUI parameter info
        info(i, lower, upper) = hbargraph("%i", lower, upper);
        // ms Buffer
        maxDelay = (ma.SR / 1000) * clip(1, 10000, msBuffer) : int;
        // max fixed delay time for evey SR (10 seconds)
        tableMax = 192000 * 10;
        bufferLenght = maxDelay + 1;
        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, phase) = (_ <: _ + f, _) ~ (_ % bufferLenght) :
            (!, _) : (_ + phase) % bufferLenght;
        // random values at random time
        randomPhase = randomclock(msJit, seed * 1) : random(1, seed * 2, _);
        // pointers
        recIndex =  int(phasorOffset_(1, 0));
        readIndex = int(phasorOffset_((((randomPhase > 0.5) - 0.5) * 2), 0)) :
            abs;
        // buffer
        buffer = rwtable(tableMax, 0.0, recIndex, _, readIndex);
        // output
        outpath = ((_ + _) : buffer) ~ _ * fbGain, (recIndex / bufferLenght :
            info(1, 0, 1)) : attach, (readIndex / bufferLenght :
            info(2, 0, 1)) : attach;
    };
//process =  _ : delinversion(hslider("bufferms", 1000, 1, 10000, 1), 100, 0.9, 2312409014821);

sampler(i, recON, lenSec, fModON, invON, jitON, windON,
        windSamps, fjit, fjitMod, seed, x) = buffer
    with{
        // tape dimensions
        offset = 2;
        LengthSecMax = 10;
        lengthSec = clip(0.001, LengthSecMax, lenSec) : int;
        bufferLenght = SR * lengthSec : int;

        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, offset, rec) = (_ <: _ + f, _) ~
            (_ * rec % bufferLenght) : (!, _) :
            (_ + offset * bufferLenght) % bufferLenght;

        // clock function - asinc pulse train
        clock = asincPulseTrain(fjit, fjitMod, seed * 1 * (i + 1));

        // sah noise is positive or negative? (+/- 1)
        sahPolarity = signum(((noise(seed * 3 * (i + 1)), clock) : sah)) *
            invON + (1 - invON);
        // sampled freq
        sahFreq = (16 ^ ((noise(seed * 4 * (i + 1)), clock) : sah)) * fModON +
            (1 - fModON);
        // sampled offset
        sahJitter = (abs((noise(seed * 2 * (i + 1)), clock) : sah) * jitON);
        // windowing
        ramp = (((clock == 0) : (+ ~ _* (1 - clock)) / windSamps <:
            (_ <= 1) * _) + clock) > 0;
        wind = ramp;

        // pointers
        recIndex =  phasorOffset_((1 / lengthSec), 0, (recON));
        readIndex = phasorOffset_((sahFreq / lengthSec) *
                    sahPolarity, sahJitter, 1) : abs;

        // buffer
        buffer = x <: (rwtable(SRMAX * LengthSecMax + offset, 0.0, recIndex +
            (offset * recON), _, readIndex + offset) <: (_ * wind * windON) +
            (_ * (1 - windON))) + (_ * (1 - wind)) * windON;
    };
// sampler(i, recON, lenSec, fModON, invON, jitON, windON, windSamps, fjit, fjitMod, seed, x)
/*
process = _ <: par(i, 2, sampler(i, recONgui, lengui, fModgui, inversegui, jitgui, windgui, windsampgui, fjitgui, fmodjitgui, 1343820503284, _))
with{
    recONgui = checkbox("recording");
    lengui = hslider("tape lenght", 1, 1, 10, 1);
    fModgui = checkbox("frequency jittering");
    inversegui = checkbox("inverse Jittering");
    jitgui = checkbox("position Jittering");
    windgui = checkbox("windowing jittering");
    windsampgui = hslider("window samples", 1, 1, 192000, 1);
    fjitgui = hslider("synch jit clock (base)", 1, 1, 1000, 1);
    fmodjitgui = hslider("asynch jit clock (sum)", 1, 1, 1000, 1);
};
*/

//------------------------------------------------------- GRANULAR SAMPLING ---
granular_sampling(k, N, bufSec, x) = triggerArray(N, rate) :
    par(i, N, grain(bufSec, position, duration, x)) :> _
with {
        grain(L, position, duration, x, trigger) = hann(phase) *
            buffer(readPtr, x)
        with {
            maxLength = L * 192000;
            length = L * SR;
            hann(ph) = sin(PI * ph) ^ 2.0;
            lineSegment = loop ~ si.bus(2) : _ , ! , _
            with {
                loop(yState, incrementState) = y , increment , ready
                with {
                    ready = ((yState == 0.0) | (yState == 1.0)) & trigger;
                    y = ba.if(ready, increment, min(1.0, yState + increment));
                    increment = ba.if(
                            ready, (1.0/SR) / max((1.0/SR), duration),
                                incrementState);
                };
            };
            phase = lineSegment : _ , !;
            unlocking = lineSegment : ! , _;
            lock(param) = ba.sAndH(unlocking, param);
            grainPosition = lock(position);
            grainDuration = lock(duration);
            readPtr = grainPosition * length + phase * grainDuration * SR;
            buffer(readPtr, x) =
                it.frwtable(3, maxLength, .0, writePtr, x, readPtrWrapped)
            with {
                writePtr = ba.period(length);
                readPtrWrapped = ma.modulo(readPtr, length);
            };
        };

        // works for N >= 2
        triggerArray(N, rate) = loop ~ si.bus(3) : (! , ! , _) <:
            par(i, N, == (i)) : par(i, N, \(x).(x > x'))
        with {
            loop(incrState, phState, counterState) = incr , ph , counter
            with {
                init = 1 - 1';
                trigger = (phState < phState') + init;
                incr = ba.if(trigger, rate * (1.0/SR), incrState);
                ph = ma.frac(incr + phState);
                counter = (trigger + counterState) % N;
            };
        };

        // pseudo-random noise with linear congruential generator (LCG)
        noise(initSeed) = LCG ~ _ : (_ / m)
        with {
            // initSeed = an initial seed value
            a = 18446744073709551557; // a large prime number,
                // such as 18446744073709551557
            c = 12345; // a small prime number, such as 12345
            m = 2 ^ 31; // 2.1 billion
            // linear_congruential_generator
            LCG(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
        };
        rnd(i) = abs(noise(12345 + i * 12345));

        position =
            hslider("v: Granular Sampling %k/Buffer Position", 0, 0, 1, .001) *
            (1 - (rnd(1) *
            hslider("v: Granular Sampling %k/Jitter Position", 0, 0, 1, .001)));
        rate =
            hslider("v: Granular Sampling %k/Density Hz", 20, 1, 100, .001) *
            (1 - (rnd(2) *
            hslider("v: Granular Sampling %k/Jitter Density", 0, 0, 1, .001)));
        duration =
            hslider("v: Granular Sampling %k/Duration Sec.", .1, .001, 1, .001)
            * (1 - (rnd(3) *
            hslider("v: Granular Sampling %k/Jitter Dur.", 0, 0, 1, .001)));
    };
//process = hgroup("granulators", (granular_sampling(1, 10, 10), granular_sampling(2, 10, 10)));

//--------------------------------------------- TIMESTRETCHING (OLA 2 HEADS) ---
// Timestretcher - sum of the 2 Head Reads
// Bufpos = 0 to 1 signals for the reads
timeStretcher(bufferMax, bufferSec, record, readSection, readOffset,
              readStretch, readJitter, grainDimMs, i, x) = x <: head1 + head2
with{
    offset = 2;
    // tableMax = table Max Dimension - 10 Seconds
    tableMax = 192000 * bufferMax + offset;

    // Phasor Function
        LetrecPhasor(f) = Xn
            letrec{
                'Xn = (Xn+(f/SR)) : frac;
            };

    frac(x) = x-floor(x);
    // read section
    // stretchFactor - 0 Normal / 1 Extreme stretch (Freeze)
        stretch = LetrecPhasor( (1/bufferSec) - readStretch)
            * readSection;
    // Jitter Amount in the position for the reads
    rnd = abs(noise(10667 * (i + 1)));
    jitter = rnd * readJitter;
    // position in the Buffer for the Reads
    cntrlRead = (readOffset+stretch)-jitter : frac;
    // L = buffer dimension in seconds
    L = SR * bufferSec;
    // Write index - ramp 0 to L
    wIdx = offset + ((+(1) : %(L)) ~ _) * record : int <:
        attach(_, _/L : hbargraph("[0]Write-Head %i",0,1));
    buffer(p, x) = it.frwtable(3, tableMax, .0, wIdx, x, p);
    // Hanning window Equation
    hann(x) = sin(frac(x) * PI) ^ 2.0;
    // Grain in Milliseconds
    grainms = 1000/grainDimMs : si.smoo;
    // Position of the grain in the Buffer
    bufPos = cntrlRead <: attach(_, _ : hbargraph("[1]Read-Head %i",0,1));
    timePhase = offset + (bufPos * L);
    // two Heads for the read
    // 0°
    ph1 = LetrecPhasor(grainms);
    // 180*
    ph2 = ma.frac(.5 + ph1);
    // Buffer positions = Position in the Buffer + Grain Read
    pos1 = sah(ph1 : \(x).(x < x'), timePhase) + ph1*(SR/grainms);
    pos2 = sah(ph2 : \(x).(x < x'), timePhase) + ph2*(SR/grainms);
    // Windows + Buffer Reads
    head1 = hann(ph1) * buffer(pos1);
    head2 = hann(ph2) * buffer(pos2);
};
// process = timeStretcher(1, 1, 1, .1, .5, .1, .01, 80, 1),
//     timeStretcher(1, 1, 1, .1, .0, .1, .01, 80, 2);

/*******************************************************************************
* NETWORKS
*******************************************************************************/

// Vectorial Operations
// perform operations on an arbitrary number of vectors
vecOp(vectorsList, op) =
    vectorsList : seq(i, vecDim - 1, vecOp2D , vecBus(vecDim - 2 - i))
    with {
        vecBus(0) = par(i, vecLen, 0 : !);
        vecBus(dim) = par(i, dim, si.bus(vecLen));
        vecOp2D = ro.interleave(vecLen, 2) : par(i, vecLen, op);
        vecDim = outputs(vectorsList) / vecLen;
        vecLen = outputs(ba.take(1, vectorsList));
    };

// Matrixes
// vector FDN Matrix
vecMx(N, list) = si.bus(N) <: par(i, N, (vecOp((si.bus(N), list), *) :> +));

vecMatrix(N) = si.bus(N) <: par(i, N, (vecOp((si.bus(N), list(i+1)), *) :> +))
with{
    list(1) = 1, 0, 0, 0;
    list(2) = 0, 1, 0, 0;
    list(3) = 0, 0, 1, 0;
    list(4) = 0, 0, 0, 1;
    list(5) = 1, 0, 0, 0;
    list(6) = 0, 1, 0, 0;
    list(7) = 0, 0, 1, 0;
    list(8) = 0, 0, 0, 1;
};
//process = vecMatrix(4);

// fully connected FDN Matrix
fullyconnectedMx(N) =  vecMx(N, par(i, N, 1));
fullyconnectedMxNormalized(N) =  vecMx(N, par(i, N, 1/N));
//process = fullyconnectedMxNormalized(4);

// hadamard FDN Matrix
butterfly(2) = si.bus(2) <: +, -;
butterfly(N) = si.bus(N) <: ro.interleave(N/2,2), ro.interleave(N/2,2) :
    par(i, N/2, +), par(i, N/2, -);
hadamard(2) = butterfly(2);
hadamard(N) = butterfly(N) : (hadamard(N/2), hadamard(N/2));
//process = hadamard(8);

// Normalized hadamard FDN Matrix
hadamardcoeff(N) = par(i, N, 1.0 / sqrt(N));
hadamardNormalized(N) = vecOp((hadamard(N) , hadamardcoeff(N)), *);
//process = hadamardNormalized(8);

// Networks
FDNfullyconnected(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) :
    vecOp((si.bus(N), par(i, N, D * SR - 1)), @)) ~
        (fullyconnectedMxNormalized(N));
//process = FDNfullyconnected(4, 1, 1);

FDNhadamard(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) :
    vecOp((si.bus(N), par(i, N, D * SR - 1)), @)) ~
        (hadamardNormalized(N));
//process = FDNhadamard(4, 1, 1);

FDNsingleLoop(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) :
    vecOp((si.bus(N), par(i, N, D * SR - 1)), @)) ~ ro.crossNM(N-1, 1);
//process = FDNsingleLoop(8, 1, 1);

FDNmatrix(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) :
    vecOp((si.bus(N), par(i, N, D * SR - 1)), @)) ~ (vectorMatrix(N))
with{
    vectorMatrix(N) = si.bus(N) <:
        par(i, N, (vecOp((si.bus(N), list(i+1)), *) :> +))
    with{
        list(1) = 1, 0, 0, 0;
        list(2) = 0, 1, 0, 0;
        list(3) = 0, 0, 1, 0;
        list(4) = 0, 0, 0, 1;
        list(5) = 1, 0, 0, 0;
        list(6) = 0, 1, 0, 0;
        list(7) = 0, 0, 1, 0;
        list(8) = 0, 0, 0, 1;
    };
};
//process = FDNmatrix(4, 1, 1);

/*******************************************************************************
* PRIMES NUMBERS LIST
*******************************************************************************/

// Prime Numbers List
primes =
(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,
79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,
167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,
563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,
653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,
761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063,
1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,
1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259,
1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361,
1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453,
1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549,
1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621,
1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733,
1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847,
1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949,
1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039,
2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137,
2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251,
2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347,
2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437,
2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551,
2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671,
2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741,
2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843,
2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957,
2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067,
3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191,
3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307,
3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391,
3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517,
3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607,
3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701,
3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821,
3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919,
3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021,
4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133,
4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243,
4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357,
4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481,
4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591,
4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691,
4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801,
4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937,
4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021,
5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147,
5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273,
5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399,
5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483,
5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591,
5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701,
5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821,
5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903,
5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053,
6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163,
6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271,
6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361,
6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491,
6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619,
6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733,
6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841,
6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961,
6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057,
7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207,
7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321,
7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477,
7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559,
7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669,
7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759,
7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901,
7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039,
8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161,
8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269,
8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387,
8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527,
8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641,
8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737,
8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839,
8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969,
8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091,
9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203,
9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323,
9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431,
9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533,
9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661,
9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781,
9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883,
9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037,
10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133,
10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223,
10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313,
10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429,
10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529,
10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639,
10651, 10657, 10663, 10667);

// Primes Thousands Numbers List
primesThousands =
(10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099,
10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181,
10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289,
10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391,
10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499,
10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613,
10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711,
10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837,
10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937,
10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057,
11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149,
11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257,
11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353,
11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471,
11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587,
11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701,
11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813,
11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909,
11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987,
12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107,
12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211,
12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301,
12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413,
12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503,
12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589,
12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689,
12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799,
12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911,
12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001,
13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103,
13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187,
13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313,
13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421,
13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537,
13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669,
13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729,
13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841,
13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931,
13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057,
14071, 14081, 14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177,
14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323,
14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423,
14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537,
14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629,
14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731,
14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813,
14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897,
14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031,
15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137,
15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241,
15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319,
15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413,
15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527,
15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641,
15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733,
15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809,
15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919,
15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061,
16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139,
16141, 16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253,
16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381,
16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487,
16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619,
16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703,
16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843,
16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943,
16963, 16979, 16981, 16987, 16993, 17011, 17021, 17027, 17029, 17033, 17041,
17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167,
17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293,
17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387,
17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477,
17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579,
17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683,
17707, 17713, 17729, 17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807,
17827, 17837, 17839, 17851, 17863, 17881, 17891, 17903, 17909, 17911, 17921,
17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013,
18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121,
18127, 18131, 18133, 18143, 18149, 18169, 18181, 18191, 18199, 18211, 18217,
18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287, 18289, 18301, 18307,
18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413,
18427, 18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517,
18521, 18523, 18539, 18541, 18553, 18583, 18587, 18593, 18617, 18637, 18661, 
18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749, 18757, 18773,
18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917,
18919, 18947, 18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051,
19069, 19073, 19079, 19081, 19087, 19121, 19139, 19141, 19157, 19163, 19181,
19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267, 19273,
19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403,
19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469,
19471, 19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559,
19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699,
19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801,
19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919,
19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011);
