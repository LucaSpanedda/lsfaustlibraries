/*******************************************************************************
* RAW : READ AND WRITE TABLES
*******************************************************************************/
import("ls.lib");

//----------------------------------------------------------------- SAMPLERS ---
deljitter(seed, lenSec, fbGain) = (_ + _ : buffer) ~ _ * fbGain
    with{
        // tape dimensions
        offset = 2;
        LengthSecMax = 10;
        lengthSec = clip(0.001, LengthSecMax, lenSec) : int;
        bufferLenght = SR * lengthSec : int;
        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, phase, rec) = (_ <: _ + f, _) ~ (_ * rec % bufferLenght) : (!, _) : (_ + phase * bufferLenght) % bufferLenght;
        // pointers
        recIndex =  phasorOffset_((1 / lengthSec), 0, 1);
        readIndex(phase) = phasorOffset_((1 / lengthSec), phase, 1);   
        randomPhase = randomclock(1000, seed * 1) : random(1, seed * 2, _); 
        // buffer
        buffer = rwtable(SRMAX * LengthSecMax + offset, 0.0, recIndex + offset, _, (randomPhase : readIndex) + offset);
    };
// process = _ <: deljitter(7432318424787391, 4, 0.9), deljitter(473877432318491, 4, 0.9);

sampler(i, recON, lenSec, fModON, invON, jitON, windON, windSamps, fjit, fjitMod, seed, x) = buffer
    with{
        // tape dimensions
        offset = 2;
        LengthSecMax = 10;
        lengthSec = clip(0.001, LengthSecMax, lenSec) : int;
        bufferLenght = SR * lengthSec : int;

        // phasor with phase offset : 0 - 1 (memory pointer)
        phasorOffset_(f, offset, rec) = (_ <: _ + f, _) ~ (_ * rec % bufferLenght) : (!, _) : (_ + offset * bufferLenght) % bufferLenght;

        // clock function - asinc pulse train
        clock = asincPulseTrain(fjit, fjitMod, seed * 1 * (i + 1));

        // sah noise is positive or negative? (+/- 1)
        sahPolarity = signum(((noise(seed * 3 * (i + 1)), clock) : sah)) * invON + (1 - invON);
        // sampled freq 
        sahFreq = (16 ^ ((noise(seed * 4 * (i + 1)), clock) : sah)) * fModON + (1 - fModON);
        // sampled offset
        sahJitter = (abs((noise(seed * 2 * (i + 1)), clock) : sah) * jitON);
        // windowing
        ramp = (((clock == 0) : (+ ~ _* (1 - clock)) / windSamps <: (_ <= 1) * _) + clock) > 0;
        wind = ramp;

        // pointers
        recIndex =  phasorOffset_((1 / lengthSec), 0, (recON));
        readIndex = phasorOffset_((sahFreq / lengthSec) * sahPolarity, sahJitter, 1) : abs;    

        // buffer
        buffer = x <: (rwtable(SRMAX * LengthSecMax + offset, 0.0, recIndex + (offset * recON), _, readIndex + offset) <: (_ * wind * windON) + (_ * (1 - windON))) + (_ * (1 - wind)) * windON;
    };
// sampler(i, recON, lenSec, fModON, invON, jitON, windON, windSamps, fjit, fjitMod, seed, x)
/*
process = _ <: par(i, 2, sampler(i, recONgui, lengui, fModgui, inversegui, jitgui, windgui, windsampgui, fjitgui, fmodjitgui, 1343820503284, _))
with{ 
    recONgui = checkbox("recording"); 
    lengui = hslider("tape lenght", 1, 1, 10, 1);
    fModgui = checkbox("frequency jittering");
    inversegui = checkbox("inverse Jittering");
    jitgui = checkbox("position Jittering");
    windgui = checkbox("windowing jittering");
    windsampgui = hslider("window samples", 1, 1, 192000, 1);
    fjitgui = hslider("synch jit clock (base)", 1, 1, 1000, 1);
    fmodjitgui = hslider("asynch jit clock (sum)", 1, 1, 1000, 1);
}; 
*/

//------------------------------------------------------- GRANULAR SAMPLING ---
granular_sampling(k, N, bufSec, x) = triggerArray(N, rate) : 
    par(i, N, grain(bufSec, position, duration, x)) :> _
with {
        grain(L, position, duration, x, trigger) = hann(phase) * 
            buffer(readPtr, x)
        with {
            maxLength = L * 192000;
            length = L * SR;
            hann(ph) = sin(PI * ph) ^ 2.0;
            lineSegment = loop ~ si.bus(2) : _ , ! , _
            with {
                loop(yState, incrementState) = y , increment , ready
                with {
                    ready = ((yState == 0.0) | (yState == 1.0)) & trigger;
                    y = ba.if(ready, increment, min(1.0, yState + increment));
                    increment = ba.if(
                            ready, (1.0/SR) / max((1.0/SR), duration), 
                                incrementState);
                };
            };
            phase = lineSegment : _ , !;
            unlocking = lineSegment : ! , _;
            lock(param) = ba.sAndH(unlocking, param); 
            grainPosition = lock(position);
            grainDuration = lock(duration);
            readPtr = grainPosition * length + phase * grainDuration * SR;
            buffer(readPtr, x) = 
                it.frwtable(3, maxLength, .0, writePtr, x, readPtrWrapped)
            with {
                writePtr = ba.period(length);
                readPtrWrapped = ma.modulo(readPtr, length);
            };
        };

        // works for N >= 2
        triggerArray(N, rate) = loop ~ si.bus(3) : (! , ! , _) <: 
            par(i, N, == (i)) : par(i, N, \(x).(x > x'))
        with {
            loop(incrState, phState, counterState) = incr , ph , counter
            with {
                init = 1 - 1';
                trigger = (phState < phState') + init;
                incr = ba.if(trigger, rate * (1.0/SR), incrState);
                ph = ma.frac(incr + phState);
                counter = (trigger + counterState) % N;
            };
        };

        // pseudo-random noise with linear congruential generator (LCG)
        noise(initSeed) = LCG ~ _ : (_ / m)
        with {
            // initSeed = an initial seed value
            a = 18446744073709551557; // a large prime number, 
                // such as 18446744073709551557
            c = 12345; // a small prime number, such as 12345
            m = 2 ^ 31; // 2.1 billion
            // linear_congruential_generator
            LCG(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
        };
        rnd(i) = abs(noise(12345 + i * 12345));

        position = 
            hslider("v: Granular Sampling %k/Buffer Position", 0, 0, 1, .001) * 
            (1 - (rnd(1) * 
            hslider("v: Granular Sampling %k/Jitter Position", 0, 0, 1, .001)));
        rate = 
            hslider("v: Granular Sampling %k/Density Hz", 20, 1, 100, .001) * 
            (1 - (rnd(2) * 
            hslider("v: Granular Sampling %k/Jitter Density", 0, 0, 1, .001)));
        duration = 
            hslider("v: Granular Sampling %k/Duration Sec.", .1, .001, 1, .001) * 
            (1 - (rnd(3) * 
            hslider("v: Granular Sampling %k/Jitter Dur.", 0, 0, 1, .001))); 
    };
//process = hgroup("granulators", (granular_sampling(1, 10, 10), granular_sampling(2, 10, 10)));

//--------------------------------------------- TIMESTRETCHING (OLA 2 HEADS) ---
// Timestretcher - sum of the 2 Head Reads
// Bufpos = 0 to 1 signals for the reads
timeStretcher(bufferMax, bufferSec, record, readSection, readOffset, readStretch, readJitter, grainDimMs, i, x) = x <: head1 + head2 
with{
    offset = 2;
    // tableMax = table Max Dimension - 10 Seconds
    tableMax = 192000 * bufferMax + offset;

    // Phasor Function
        LetrecPhasor(f) = Xn
            letrec{
                'Xn = (Xn+(f/SR)) : frac;
            };

    frac(x) = x-floor(x);
    // read section
    // stretchFactor - 0 Normal / 1 Extreme stretch (Freeze)
        stretch = LetrecPhasor( (1/bufferSec) - readStretch)
            * readSection;
    // Jitter Amount in the position for the reads
    rnd = abs(noise(10667 * (i + 1)));
    jitter = rnd * readJitter;
    // position in the Buffer for the Reads
    cntrlRead = (readOffset+stretch)-jitter : frac;
    // L = buffer dimension in seconds
    L = SR * bufferSec;
    // Write index - ramp 0 to L
    wIdx = offset + ((+(1) : %(L)) ~ _) * record : int <: 
        attach(_, _/L : hbargraph("[0]Write-Head %i",0,1));
    buffer(p, x) = it.frwtable(3, tableMax, .0, wIdx, x, p);
    // Hanning window Equation
    hann(x) = sin(frac(x) * PI) ^ 2.0;
    // Grain in Milliseconds
    grainms = 1000/grainDimMs : si.smoo;
    // Position of the grain in the Buffer
    bufPos = cntrlRead <: attach(_, _ : hbargraph("[1]Read-Head %i",0,1));
    timePhase = offset + (bufPos * L);
    // two Heads for the read
    // 0Â°
    ph1 = LetrecPhasor(grainms);
    // 180* 
    ph2 = ma.frac(.5 + ph1);
    // Buffer positions = Position in the Buffer + Grain Read
    pos1 = sah(ph1 : \(x).(x < x'), timePhase) + ph1*(SR/grainms);
    pos2 = sah(ph2 : \(x).(x < x'), timePhase) + ph2*(SR/grainms);
    // Windows + Buffer Reads
    head1 = hann(ph1) * buffer(pos1);
    head2 = hann(ph2) * buffer(pos2);
};
// process = timeStretcher(1, 1, 1, .1, .5, .1, .01, 80, 1), 
//     timeStretcher(1, 1, 1, .1, .0, .1, .01, 80, 2);
