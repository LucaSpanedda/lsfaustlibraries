/*******************************************************************************
* RANDOM VALUES GENERATION
*******************************************************************************/
import("ls.lib");

// Synchronous pulse train in HZ
metro(ms) = phasor0(1000 / max(1, ms)) : derivate + dirac
with{
    // phasor that start from 0
    phasor0(f) = (_ <: _ + f, _) ~ _ % ma.SR : (!, _ / ma.SR);
    // Dirac Impulse at Compile Time
    dirac = 1 - (1 : mem);
    // first derivate
    derivate(x) = x < x';
};
//process = metro(100);

// Pseudo-random noise with linear congruential generator (LCG)
noise(initSeed) = lcg ~ _ : (_ / m)
with{
    a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
    lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
};
//process = noise(1212);

// Noise - Linear Congruential Generator - Multiple Outputs
multinoise(N, initSeed) = ((_ + (initSeed - initSeed') : 
    seqN(N, (_ * a + c) % m )) ~ _ : par(i, N, _ / m))
with{
    // LCG constants
    a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
    // Sequential operations
    seqN(N, OP) = _ <: seq(i, N, (OP <: _, _), 
        si.bus(i + 1)) : (_, !, si.bus(N - 1), !);
};
//process = multinoise(4, 1212);

// random number generator
random(range, seed, trigger) = ((noise(seed) : abs), dirac(trigger)) : 
    sah * range
with{
    // transform a constant to 1 sample trigger
    dirac(x) = (x - x') > 0;
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };  
    // a classic sample and hold
    sah(x, t) = selector(t, _, x) ~ _
    with{
        // binary selector
        selector(sel, x, y) = x * (1 - sel) + y * (sel);
    };
};
//process = random(100, 1212, button("trigger"));

// random impulse generator / ms1 & ms2 = range
randometro(seed, ms1, ms2) = randomtrigger
with{
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // Dirac Impulse at Compile Time
    dirac = 1 - (1 : mem);
    derivate(x) = x < x';
    phasor0(f) = (_ <: _ + f, _) ~  _ % ma.SR : (!, _ / ma.SR);
    pulseTrain(f) = phasor0(f) : derivate;
    // a classic sample and hold
    sah(t, x) = selector(t, _, x) ~ _
    with{
        // binary selector
        selector(sel, x, y) = x * (1 - sel) + y * (sel);
    };
    msMin = min((1000 / max(1, ms1)), (1000 / max(1, ms2)));
    msMax = max((1000 / max(1, ms1)), (1000 / max(1, ms2)));
    randomtrigger = ((_ + dirac), abs(noise(seed)) * (msMax - msMin) + msMin : 
        sah : pulseTrain) ~ _;
};
//process = randometro(1212, 100, 4000), randometro(1234, 100, 4000);

// noise sampled with a classic sample and hold
sahNoise(seed, f) = selector(pulseTrain, _, noise(seed)) ~ _
with{
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // binary selector
    selector(sel, x, y) = x * (1 - sel) + y * (sel);
    // Dirac Impulse at Compile Time
    dirac = 1 - (1 : mem);
    derivate(x) = x < x';
    phasor0 = (_ <: _ + f, _) ~  _ % ma.SR : (!, _ / ma.SR);
    pulseTrain = phasor0 : derivate + dirac;
};
//process = sahNoise(1212, 100);

// SAH noise at random intervals / ms1 & ms2 = range
sahNoiserandom(seed, ms1, ms2) = selector(randometro, _, noise(seed)) ~ _
with{
    // Pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // binary selector
    selector(sel, x, y) = x * (1 - sel) + y * (sel);
    // random impulse generator / ms1 & ms2 = range
    randometro = randomtrigger
    with{
        // Dirac Impulse at Compile Time
        dirac = 1 - (1 : mem);
        derivate(x) = x < x';
        phasor0(f) = (_ <: _ + f, _) ~  _ % ma.SR : (!, _ / ma.SR);
        pulseTrain(f) = phasor0(f) : derivate;
        // a classic sample and hold
        sah(t, x) = selector(t, _, x) ~ _
        with{
            // binary selector
            selector(sel, x, y) = x * (1 - sel) + y * (sel);
        };
        msMin = min((1000 / max(1, ms1)), (1000 / max(1, ms2)));
        msMax = max((1000 / max(1, ms1)), (1000 / max(1, ms2)));
        randomtrigger = ((_ + dirac), abs(noise(seed * 2)) * (msMax - msMin) + 
            msMin : sah : pulseTrain) ~ _;
    };
};
//process = sahNoiserandom(1212, 100, 4000);

// random walk generator : variable steps and max value
drunk(seed, maxvalue, stepsize, trigger) = noise(seed), (trigger : dirac) : 
    sah * (abs(stepsize) + 1) : int * (trigger : dirac) : + ~ _ : 
        foldInt(abs(maxvalue))
with{
    // transform a constant to 1 sample trigger
    dirac(x) = (x - x') > 0;
    // pseudo-random noise with linear congruential generator (LCG)
    noise(initSeed) = lcg ~ _ : (_ / m)
    with{
        a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
        lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    };
    // a classic sample and hold
    sah(x, t) = selector(t, _, x) ~ _
    with{
        // binary selector
        selector(sel, x, y) = x * (1 - sel) + y * (sel);
    };
    // fold at max Int value and 0
    foldInt(maxv, x) = maxv - abs((abs(x) % (2 * maxv)) - maxv);
};
//process = (os.phasor(1, 10) - 0.1 < 0.0) : drunk(1212, 100, 10);
